package io.ipfs.kotlin

import io.ipfs.kotlin.defaults.*

/**
 * Provision : {{ELEMENT}}Value (content of an Immutable file) from its ImmutableType
 * Needs     : {{ELEMENT}}Type (MultiHashType (strHas)) where strHas is the hash string
 * Needed by : 
 * Done by   : LocalIpfs().get.cat(strHas)
 * Command   : gradlew run --args="-ipfs cat QmbEm7hDJ9zB22UPnXRGfaWrFoEbJZbHPTEa6udMZ48riz" 
 * Author : Emile Achadde 01 mars 2020 at 10:29:03+01:00
 */

class {{ELEMENT}}Provider {

    val register = {{ELEMENT}}Register()
    
    fun build ({{ABBREVIATION}}Typ: {{ELEMENT}}Type): {{ELEMENT}}Value {
	val (here, caller) = moduleHereAndCaller()
	entering(here, caller)
	
	if(isTrace(here)) println("$here: input {{ABBREVIATION}}Typ '${{ABBREVIATION}}Typ'")
	val strHas = {{ABBREVIATION}}Typ.hashOf()
	if(isDebug(here)) println("$here: input strHas '$strHas'")

	val str = LocalIpfs().get.cat(strHas)
	
	if(isDebug(here)) println("$here: input str:")
	if(isDebug(here)) println(str)
	val result = {{ELEMENT}}Value(str)
	if(isTrace(here)) println("$here: output result:")
	if(isTrace(here)) println(result.contentOf())
	
	exiting(here)
	return result 
    }
    
    fun buildAndStore({{ABBREVIATION}}Typ: {{ELEMENT}}Type){
	val (here, caller) = moduleHereAndCaller()
	entering(here, caller)
	
	if(isTrace(here)) println("$here: input {{ABBREVIATION}}Typ '${{ABBREVIATION}}Typ'")
	
	val {{ABBREVIATION}}Con = build({{ABBREVIATION}}Typ)
	register.store({{ABBREVIATION}}Typ, {{ABBREVIATION}}Con)
	
	exiting(here)
    }
    
    fun provide({{ABBREVIATION}}Typ: {{ELEMENT}}Type) : {{ELEMENT}}Value {
	val (here, caller) = moduleHereAndCaller()
	entering(here, caller)
	
	if(isTrace(here)) println("$here: input {{ABBREVIATION}}Typ '${{ABBREVIATION}}Typ'")
	
	if (register.isStored({{ABBREVIATION}}Typ)){
	    register.retrieve({{ABBREVIATION}}Typ)
	}
	else {
	    buildAndStore({{ABBREVIATION}}Typ)
	}
	
	val result = register.retrieve({{ABBREVIATION}}Typ)
	if (isTrace(here)) println("$here: output result '$result'")
	
	exiting(here)
	return result
    }
    
}
